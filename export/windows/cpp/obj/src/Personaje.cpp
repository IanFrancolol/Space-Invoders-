// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Bala
#include <Bala.h>
#endif
#ifndef INCLUDED_Personaje
#include <Personaje.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_afe0a5609aa5ed3f_11_new,"Personaje","new",0xf5311b39,"Personaje.new","Personaje.hx",11,0x8643ee57)
HX_LOCAL_STACK_FRAME(_hx_pos_afe0a5609aa5ed3f_21_update,"Personaje","update",0xb381c8d0,"Personaje.update","Personaje.hx",21,0x8643ee57)
HX_LOCAL_STACK_FRAME(_hx_pos_afe0a5609aa5ed3f_29_movimiento,"Personaje","movimiento",0x30823a9c,"Personaje.movimiento","Personaje.hx",29,0x8643ee57)
HX_LOCAL_STACK_FRAME(_hx_pos_afe0a5609aa5ed3f_42_checkLimite,"Personaje","checkLimite",0xfee5538b,"Personaje.checkLimite","Personaje.hx",42,0x8643ee57)
HX_LOCAL_STACK_FRAME(_hx_pos_afe0a5609aa5ed3f_61_Disparar,"Personaje","Disparar",0x6e3bc72b,"Personaje.Disparar","Personaje.hx",61,0x8643ee57)

void Personaje_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_afe0a5609aa5ed3f_11_new)
HXLINE(  14)		this->checkDisparo = false;
HXLINE(  17)		super::__construct(X,Y,SimpleGraphic);
            	}

Dynamic Personaje_obj::__CreateEmpty() { return new Personaje_obj; }

void *Personaje_obj::_hx_vtable = 0;

Dynamic Personaje_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Personaje_obj > _hx_result = new Personaje_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Personaje_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x2e6b0ac7;
	}
}

void Personaje_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_afe0a5609aa5ed3f_21_update)
HXLINE(  22)		this->super::update(elapsed);
HXLINE(  23)		this->movimiento();
HXLINE(  24)		this->checkLimite();
HXLINE(  25)		this->Disparar();
            	}


void Personaje_obj::movimiento(){
            	HX_STACKFRAME(&_hx_pos_afe0a5609aa5ed3f_29_movimiento)
HXLINE(  30)		int velocidad = (int)4;
HXLINE(  32)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  32)		if (_this->keyManager->checkStatus((int)39,_this->status)) {
HXLINE(  34)			Float _hx_tmp = this->x;
HXDLIN(  34)			this->set_x((_hx_tmp + ((velocidad * ::flixel::FlxG_obj::elapsed) * ::flixel::FlxG_obj::updateFramerate)));
            		}
HXLINE(  36)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  36)		if (_this1->keyManager->checkStatus((int)37,_this1->status)) {
HXLINE(  38)			Float _hx_tmp1 = this->x;
HXDLIN(  38)			this->set_x((_hx_tmp1 - ((velocidad * ::flixel::FlxG_obj::elapsed) * ::flixel::FlxG_obj::updateFramerate)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Personaje_obj,movimiento,(void))

void Personaje_obj::checkLimite(){
            	HX_STACKFRAME(&_hx_pos_afe0a5609aa5ed3f_42_checkLimite)
HXLINE(  43)		if ((this->x < (int)0)) {
HXLINE(  45)			this->set_x((int)0);
            		}
            		else {
HXLINE(  47)			Float _hx_tmp = this->x;
HXDLIN(  47)			int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  47)			if ((_hx_tmp > (_hx_tmp1 - this->get_width()))) {
HXLINE(  49)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(  49)				this->set_x((_hx_tmp2 - this->get_width()));
            			}
            		}
HXLINE(  51)		if ((this->y < (int)0)) {
HXLINE(  53)			this->set_y((int)0);
            		}
            		else {
HXLINE(  55)			Float _hx_tmp3 = this->y;
HXDLIN(  55)			int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(  55)			if ((_hx_tmp3 > (_hx_tmp4 - this->get_height()))) {
HXLINE(  57)				int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN(  57)				this->set_y((_hx_tmp5 - this->get_height()));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Personaje_obj,checkLimite,(void))

void Personaje_obj::Disparar(){
            	HX_GC_STACKFRAME(&_hx_pos_afe0a5609aa5ed3f_61_Disparar)
HXLINE(  62)		this->bala =  ::Bala_obj::__alloc( HX_CTX ,((Float)this->x / (Float)(int)2),this->y,HX_("assets/images/bala.png",da,83,43,8c));
HXLINE(  63)		::flixel::FlxG_obj::game->_state->add(this->bala).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Personaje_obj,Disparar,(void))


hx::ObjectPtr< Personaje_obj > Personaje_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic) {
	hx::ObjectPtr< Personaje_obj > __this = new Personaje_obj();
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

hx::ObjectPtr< Personaje_obj > Personaje_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic) {
	Personaje_obj *__this = (Personaje_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Personaje_obj), true, "Personaje"));
	*(void **)__this = Personaje_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

Personaje_obj::Personaje_obj()
{
}

void Personaje_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Personaje);
	HX_MARK_MEMBER_NAME(bala,"bala");
	HX_MARK_MEMBER_NAME(checkDisparo,"checkDisparo");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Personaje_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bala,"bala");
	HX_VISIT_MEMBER_NAME(checkDisparo,"checkDisparo");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Personaje_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"bala") ) { return hx::Val( bala ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"Disparar") ) { return hx::Val( Disparar_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"movimiento") ) { return hx::Val( movimiento_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"checkLimite") ) { return hx::Val( checkLimite_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"checkDisparo") ) { return hx::Val( checkDisparo ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Personaje_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"bala") ) { bala=inValue.Cast<  ::Bala >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"checkDisparo") ) { checkDisparo=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Personaje_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bala","\xf4","\xe1","\x10","\x41"));
	outFields->push(HX_HCSTRING("checkDisparo","\x54","\x98","\xc8","\xa8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Personaje_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Bala*/ ,(int)offsetof(Personaje_obj,bala),HX_HCSTRING("bala","\xf4","\xe1","\x10","\x41")},
	{hx::fsBool,(int)offsetof(Personaje_obj,checkDisparo),HX_HCSTRING("checkDisparo","\x54","\x98","\xc8","\xa8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Personaje_obj_sStaticStorageInfo = 0;
#endif

static ::String Personaje_obj_sMemberFields[] = {
	HX_HCSTRING("bala","\xf4","\xe1","\x10","\x41"),
	HX_HCSTRING("checkDisparo","\x54","\x98","\xc8","\xa8"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("movimiento","\x55","\x88","\xff","\x0e"),
	HX_HCSTRING("checkLimite","\xb2","\x07","\x0c","\xce"),
	HX_HCSTRING("Disparar","\xa4","\x04","\x14","\xf8"),
	::String(null()) };

static void Personaje_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Personaje_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Personaje_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Personaje_obj::__mClass,"__mClass");
};

#endif

hx::Class Personaje_obj::__mClass;

void Personaje_obj::__register()
{
	hx::Object *dummy = new Personaje_obj;
	Personaje_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Personaje","\xc7","\x0a","\x6b","\x2e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Personaje_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Personaje_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Personaje_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Personaje_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Personaje_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Personaje_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

